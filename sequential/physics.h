/******************************************************************************

     MIT License

    Copyright (c) 2024 Francesco Zattoni

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.

*********************************************************************************/

#ifndef _PHYSICS_HEADER
#define _PHYSICS_HEADER

#include "../cell.h"

/**
 * Fluid viscosity. It slows down the cell's movement in the fluid.
 */
#define LAMBDA 0.1

/**
 * Size of each misuration timestep.
 */
#define TIMESTEP 0.2

#define PI 3.14159

/**
 * Function to compute acceleration using Langevin equation depending on given parameters.
 * @param velocity body current velocity
 * @param collision_forces collision forces felt by the body
 * @param mass body mass
 */
double langevin_equation(double velocity, double collision_forces, double mass);

/**
 * Getter for body mass depending on its type. For example, lymphocytes are way heavier than antibodies.
 * @param type cell type
 * @return cell's mass
 */
double get_mass(Type type);

/**
 * Using Langevin equation and following a brownian motion inside a fluid, it updates cells coordinates
 * inside 2D grid, so moving with discrete steps.
 * @param cell cell to update their current velocity and position
 * @param new_grid grid to place cell in next timestep
 */
void movement(Cell *cell, Grid *new_grid);

/**
 * It generates two random numbers following a normal distribution.
 * @param box_muller_number two numbers following a normal distribution generated by Box-Muller method.
 */
void box_muller(float box_muller_number[2]);

#endif